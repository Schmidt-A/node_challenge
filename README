Authored by:
  Allisa Schmidt

How to run:
  (On the command line:) node server.js
  (In the browser:) go to https://127.0.0.1:8080

How to use the testing webpage (index.html):
  You can use either of the following user accounts to log in:
    user: test    password: test
    user: hireme  password: plz
  In utils/ there is an adduser.js script which allows you to add more users,
  if you so desire. To run it (you must be in the utils/ directory):
    node adduser.js username password

  Once logged in, enter a configuration into the "Working Configuration"
  textbox in order to use the add/delete configurations functionality. By
  default the app has four configurations, named 'one', 'two', 'three', and
  'four' (very creative). If you would like to create a new one just enter a
  new name in the "Working Configuration" box and an entry to go inside it.

  The delete functionality will work on whatever configuration is entered into
  the "Working Configuration" box. To delete the entire configuration, leave
  the delete box blank. Otherwise enter the specific configuration entry you
  want to delete.

  Leaving the get box blank and pressing the get button will fetch ALL
  configurations. Check off the checkbox beside it to get only those with over
  100k entries. Enter a specific configuration name (like 'one') to fetch that
  configuration. If you would like to fetch sorted results, you can select/
  deselect the parameters beside the "sort by" box - you will see the order
  in which it will sort in that box.

  Logout will bring you back to the login page.

  This page does restful URI requests via ajax calls, so the app should be
  able to service any restful client.

Features at a quick glance:
  - User authentication;
  - Restful routing/requests;
  - Flexible sorting;
  - Password hashing with salts;
  - SSL with self-signed cert;
  - Logging;

Project structure:
  appdata/
    This directory contains json data that the app works with (users for
    logging in/out, and configurations).
  certs/
    Contains self-signed SSL cert. (Decidedly not production-quality).
  controllers/
    Contains two controllers that are for handling routes.
  logs/
    Contains log file generated by the app. At this point it only logs to one
    file - we'd want something more sophisticated for a bigger app.
  routes.js
    Script which handles URL-based routing, which will pass off requests to
    controller functions.
  server.js
    Starting point for the app. Declares a logging object and starts a secure
    server listening on https://127.0.0.1:8080.
  utils/
    A grab-bag of functions which may need to be reused throughout the app or
    that are used to set up the app.
  views/
    Front-end app pages. Currently only has index.html, which changes with
    ajax calls. For a bigger app we would want various different views.
